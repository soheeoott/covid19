{"version":3,"sources":["logo.svg","components/Header.js","components/Contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedData","setComparedData","useEffect","fetchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","deaths","Deaths","recovered","Recovered","findItem","find","push","console","log","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","options","legend","display","position","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0c013c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// rafce\r\nimport React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\"> {/* 리액트에서는 클래스를 줄 때 className 을 작성 */}\r\n            <h1>COVID-19</h1>\r\n            <select>\r\n                <option>국내</option>\r\n                <option>해외</option>\r\n            </select>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","// useState : 리액트 후크, 데이터를 담아 배열을 관리\r\n// useEffect : fetch api 사용\r\nimport {useState, useEffect} from 'react';\r\n\r\n// 차트를 그리기 위한 컴포넌트\r\nimport {Bar, Doughnut, Line} from 'react-chartjs-2';\r\n\r\n// axios 불러오기\r\n// https://github.com/axios/axios\r\nimport axios from 'axios'; \r\n\r\nconst Contents = () => {\r\n\r\n    // 데이터를 선언하는 부분\r\n    // state 의 조각인 useState 로 confirmedData 추가\r\n    // [데이터명, 설정 메서드]\r\n    // 초깃값 설정 useState({}); confirmedData 를 obj 형태로\r\n    const [confirmedData, setConfirmedData] = useState({});\r\n    const [quarantinedData, setQuarantinedData] = useState({});\r\n    const [comparedData, setComparedData] = useState({});\r\n\r\n    useEffect(()=> {\r\n        const fetchEvents = async () => { // 메서드 생성\r\n            // api 주소 https://documenter.getpostman.com/view/10808728/SzS8rjbc\r\n            const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\r\n            // console.log(res); // 데이터를 아직 불러오지 못했는데 호출했기 때문에 async + await 로 get 실행 후 다음 라인 수행\r\n            makeData(res.data) // obj array\r\n        }\r\n        const makeData = (items) => {\r\n            // 첫 번째 인자 : 쌓여서 다음 반복문으로 넘겨지는 전달 값\r\n            // 두 번째 인자 : 현재 반복문이 돌고 있는 items 값\r\n            const arr = items.reduce((acc, cur) => {\r\n                // 객체안에 cur 데이터를 담고 현재 날짜를 담아서 변환\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const deaths = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                // acc 배열에 값이 있는지\r\n                // 값이 없다면 새로 추가\r\n                // 값이 있다면 날짜를 비교해서 큰 날짜의 값만 저장 \r\n                // 인자의 값과 선언한 값이 있는지 비교\r\n                const findItem = acc.find(a => a.year === year && a.month === month);\r\n                \r\n                if(!findItem){\r\n                    acc.push({\r\n                        year,\r\n                        month,\r\n                        date,\r\n                        confirmed,\r\n                        active,\r\n                        deaths,\r\n                        recovered\r\n                    })\r\n                }\r\n                // 새롭게 데이터를 업데이트\r\n                // 각 달마다 마지막 날의 데이터를 넘기기\r\n                if(findItem && findItem.date < date){\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.date = date;\r\n                    findItem.confirmed = confirmed;\r\n                    findItem.active = active;\r\n                    findItem.deaths = deaths;\r\n                    findItem.recovered = recovered;\r\n                }\r\n\r\n                // findItem 을 선언할 때 acc 안에 있는 값을 선택했기 때문에\r\n                // acc 안에 값이 같이 적용된다.\r\n                return acc;\r\n            }, []) // 배열로 초깃값 설정\r\n            console.log(arr);\r\n\r\n            // map : 어떠한 배열을 재정의할 때 사용\r\n            // 중괄호를 사용하면 return 값이 필요\r\n            // 한 줄인 경우 return 을 쓰지 않아도 return 을 인식\r\n            const labels = arr.map(a => `${a.month + 1}월`);\r\n\r\n            // arr 가 만들어지면 추가\r\n            // obj 형태로 업데이트\r\n\r\n            // 누적 확진자 추이\r\n            setConfirmedData({\r\n                labels,\r\n                // fill : 그래프의 색상을 채우는지\r\n                // label - data match\r\n                datasets : [\r\n                    {\r\n                        label: \"국내 누적 확진자\",\r\n                        backgroundColor: \"salmon\",\r\n                        fill: true,\r\n                        data: arr.map(a => a.confirmed)\r\n                    },\r\n                ]\r\n            });\r\n\r\n            // 월별 격리자 현황\r\n            setQuarantinedData({\r\n                labels,\r\n                datasets : [\r\n                    {\r\n                        label: \"월별 격리자 현황\",\r\n                        borderColor: \"salmon\",\r\n                        fill: false,\r\n                        data: arr.map(a => a.active)\r\n                    },\r\n                ]\r\n            });\r\n\r\n            // 누적 확진, 해제, 사망\r\n            const last = arr[arr.length -1];\r\n            setComparedData({\r\n                labels: [\"확진자\",\"격리해제\",\"사망\"],\r\n                datasets : [\r\n                    {\r\n                        label: \"누적 확진, 해제, 사망 비율\",\r\n                        backgroundColor: [\"#ff3d67\",\"#059bff\",\"#ffc233\"],\r\n                        borderColor: [\"#ff3d67\",\"#059bff\",\"#ffc233\"],\r\n                        fill: false,\r\n                        data: [last.confirmed, last.recovered, last.deaths]\r\n                    },\r\n                ]\r\n            });\r\n        }\r\n        fetchEvents()\r\n    }, [])\r\n    // [] (두번째 dependency) : useState 의 계속적인 호출 방지\r\n\r\n    return (\r\n        <section>\r\n            <h2>국내 코로나 현황</h2>\r\n            <div className=\"contents\"> {/* 리액트에서는 클래스를 줄 때 className 을 작성 */}\r\n                {/* 누적 확진자 추이 */}\r\n                <div className=\"wrap\">\r\n                    {/* object 형태 */}\r\n                    {/* chartjs 옵션 : https://www.chartjs.org/ */}\r\n                    {/* chartjs REACT 사용법 : https://github.com/reactchartjs/react-chartjs-2 */}\r\n                    <Bar data={confirmedData} options={\r\n                        {title: {display: true, text: \"누적 확진자 추이\", fontSize: 16}},\r\n                        {legend: {display:  true, position: \"bottom\"}}\r\n                    } />\r\n                </div>\r\n\r\n                {/* 월별 격리자 현황 */}\r\n                <div className=\"wrap\">\r\n                    {/* object 형태 */}\r\n                    <Line data={quarantinedData} options={\r\n                        {title: {display: true, text: \"월별 격리자 현황\", fontSize: 16}},\r\n                        {legend: {display:  true, position: \"bottom\"}}\r\n                    } />\r\n                </div>\r\n                \r\n                {/* 누적 확진, 해제, 사망 */}\r\n                <div className=\"wrap\">\r\n                    {/* object 형태 */}\r\n                    <Doughnut data={comparedData} options={\r\n                        {title: {display: true, text: `누적 확진, 해제, 사망 (${new Date().getMonth()+1}월)`, fontSize: 16}},\r\n                        {legend: {display:  true, position: \"bottom\"}}\r\n                    } />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Contents\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header'; // 확장자(js) 생략가능\nimport Contents from './components/Contents';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header /> {/* 컴포넌트를 분리 후 import */}\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}